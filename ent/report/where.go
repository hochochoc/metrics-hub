// Code generated by entc, DO NOT EDIT.

package report

import (
	"metric-hub/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ServerName applies equality check predicate on the "server_name" field. It's identical to ServerNameEQ.
func ServerName(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServerName), v))
	})
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// DurationInSeconds applies equality check predicate on the "duration_in_seconds" field. It's identical to DurationInSecondsEQ.
func DurationInSeconds(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDurationInSeconds), v))
	})
}

// ServerNameEQ applies the EQ predicate on the "server_name" field.
func ServerNameEQ(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServerName), v))
	})
}

// ServerNameNEQ applies the NEQ predicate on the "server_name" field.
func ServerNameNEQ(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServerName), v))
	})
}

// ServerNameIn applies the In predicate on the "server_name" field.
func ServerNameIn(vs ...string) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldServerName), v...))
	})
}

// ServerNameNotIn applies the NotIn predicate on the "server_name" field.
func ServerNameNotIn(vs ...string) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldServerName), v...))
	})
}

// ServerNameGT applies the GT predicate on the "server_name" field.
func ServerNameGT(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServerName), v))
	})
}

// ServerNameGTE applies the GTE predicate on the "server_name" field.
func ServerNameGTE(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServerName), v))
	})
}

// ServerNameLT applies the LT predicate on the "server_name" field.
func ServerNameLT(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServerName), v))
	})
}

// ServerNameLTE applies the LTE predicate on the "server_name" field.
func ServerNameLTE(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServerName), v))
	})
}

// ServerNameContains applies the Contains predicate on the "server_name" field.
func ServerNameContains(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldServerName), v))
	})
}

// ServerNameHasPrefix applies the HasPrefix predicate on the "server_name" field.
func ServerNameHasPrefix(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldServerName), v))
	})
}

// ServerNameHasSuffix applies the HasSuffix predicate on the "server_name" field.
func ServerNameHasSuffix(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldServerName), v))
	})
}

// ServerNameEqualFold applies the EqualFold predicate on the "server_name" field.
func ServerNameEqualFold(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldServerName), v))
	})
}

// ServerNameContainsFold applies the ContainsFold predicate on the "server_name" field.
func ServerNameContainsFold(v string) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldServerName), v))
	})
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartTime), v))
	})
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartTime), v...))
	})
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartTime), v...))
	})
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartTime), v))
	})
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartTime), v))
	})
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartTime), v))
	})
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartTime), v))
	})
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndTime), v))
	})
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndTime), v...))
	})
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndTime), v...))
	})
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndTime), v))
	})
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndTime), v))
	})
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndTime), v))
	})
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndTime), v))
	})
}

// DurationInSecondsEQ applies the EQ predicate on the "duration_in_seconds" field.
func DurationInSecondsEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDurationInSeconds), v))
	})
}

// DurationInSecondsNEQ applies the NEQ predicate on the "duration_in_seconds" field.
func DurationInSecondsNEQ(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDurationInSeconds), v))
	})
}

// DurationInSecondsIn applies the In predicate on the "duration_in_seconds" field.
func DurationInSecondsIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDurationInSeconds), v...))
	})
}

// DurationInSecondsNotIn applies the NotIn predicate on the "duration_in_seconds" field.
func DurationInSecondsNotIn(vs ...float64) predicate.Report {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Report(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDurationInSeconds), v...))
	})
}

// DurationInSecondsGT applies the GT predicate on the "duration_in_seconds" field.
func DurationInSecondsGT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDurationInSeconds), v))
	})
}

// DurationInSecondsGTE applies the GTE predicate on the "duration_in_seconds" field.
func DurationInSecondsGTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDurationInSeconds), v))
	})
}

// DurationInSecondsLT applies the LT predicate on the "duration_in_seconds" field.
func DurationInSecondsLT(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDurationInSeconds), v))
	})
}

// DurationInSecondsLTE applies the LTE predicate on the "duration_in_seconds" field.
func DurationInSecondsLTE(v float64) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDurationInSeconds), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Report) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Report) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Report) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		p(s.Not())
	})
}
